import React, { useState } from "react";
import Head from "next/head";
import Link from "next/link";
import { Court } from "~/components/Court";
import { api } from "~/utils/api";
import { Generate } from "~/components/Generate";
import { Bench } from "~/components/Bench";
import { getLocalData } from "../../lib/localdata";
import { type GetStaticProps } from "next";

interface Person {
  id: number;
  name: string;
  benched: boolean;
  present: boolean;
}

interface LocalData {
  localData: Person[];
}

export const getStaticProps: GetStaticProps<LocalData> = async () => {
  const localData: Person[] = (await getLocalData()) as Person[];

  return {
    props: { localData },
  };
};

export default function Home({ localData }: LocalData) {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const [playerData, setPlayerData] = useState<number[]>([]);
  const handleDataGenerated = (data: number[] | undefined) => {
    setPlayerData(data);
  };
  console.log(localData);
  //testing Next API stuff

  type JSONData = Person[];

  const fetchData = async (): Promise<void> => {
    const response = await fetch("/api/storeJSONData");
    const data = (await response.json()) as JSONData;
    console.log(data);
  };

  const benchedPlayers = localData.filter((item) => item.benched === true);

  // const saveData = async (): Promise<void> => {
  //   const response = await fetch("/api/storeJSONData", {
  //     method: "POST",
  //     headers: {
  //       "Content-Type": "application/json",
  //     },
  //     body: JSON.stringify({
  //       id: 11,
  //       name: "Lorenzo",
  //       benched: true,
  //       present: true,
  //     }),
  //   });
  //   const data = (await response.json()) as JSONData;
  //   console.log(data);
  // };

  //--------------------------------------

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Court playerData={playerData} />

      <Generate onDataGenerated={handleDataGenerated} />

      <Bench playerData={playerData} />
      <Link href="/settings">Go to settings</Link>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8"></div>
          <ul>
            {benchedPlayers.map(({ id, name }) => (
              <li key={id}>
                <b>
                  {id} - {name}
                </b>

                <br />
              </li>
            ))}
          </ul>

          <div className="flex flex-col items-center gap-2">
            <button onClick={fetchData}>Fetch</button>
            {/* <button onClick={saveData}>Save</button> */}
          </div>
        </div>
      </main>
    </>
  );
}

// function AuthShowcase() {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.example.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined }
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-center text-2xl text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// }
